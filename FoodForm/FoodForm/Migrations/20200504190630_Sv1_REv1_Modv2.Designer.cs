// <auto-generated />
using System;
using FoodForm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodForm.Migrations
{
    [DbContext(typeof(FoodFormDB))]
    [Migration("20200504190630_Sv1_REv1_Modv2")]
    partial class Sv1_REv1_Modv2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodForm.Models.Comentarios", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceitaFK")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadorFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReceitaFK");

                    b.HasIndex("UtilizadorFK");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("FoodForm.Models.Denuncias", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceitaFK")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadorFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReceitaFK");

                    b.HasIndex("UtilizadorFK");

                    b.ToTable("Denuncias");
                });

            modelBuilder.Entity("FoodForm.Models.Gostos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Gosto")
                        .HasColumnType("bit");

                    b.Property<int>("ReceitaFK")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadorFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ReceitaFK");

                    b.HasIndex("UtilizadorFK");

                    b.ToTable("Gostos");
                });

            modelBuilder.Entity("FoodForm.Models.Moderadores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Moderadores");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "mod@mail.com"
                        });
                });

            modelBuilder.Entity("FoodForm.Models.Receitas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Autor")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dificuldade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredientes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PessoasServidas")
                        .HasColumnType("int");

                    b.Property<int>("Tempo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtilizadoresID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Autor");

                    b.HasIndex("UtilizadoresID");

                    b.ToTable("Receitas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Autor = 1,
                            Descricao = "Receita deliciosa! Adiciona-se 60g de cereais a uma taça, e depois 250ml de leite. Nunca o reverso!",
                            Dificuldade = "Fácil",
                            Imagem = "cereais.jpg",
                            Ingredientes = "Leite; Cereais;",
                            PessoasServidas = 1,
                            Tempo = 1,
                            Titulo = "Leite com cereais"
                        },
                        new
                        {
                            ID = 2,
                            Autor = 1,
                            Descricao = "O clássico lanche. Uma bola ou papo-seco e manteiga. Simples!",
                            Dificuldade = "Fácil",
                            Imagem = "pao.jpg",
                            Ingredientes = "Pão; Manteiga;",
                            PessoasServidas = 1,
                            Tempo = 1,
                            Titulo = "Pão com manteiga."
                        });
                });

            modelBuilder.Entity("FoodForm.Models.Utilizadores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("ID");

                    b.ToTable("Utilizadores");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "ze@mail.com",
                            Imagem = "ze.jpg",
                            Nome = "Zé"
                        },
                        new
                        {
                            ID = 2,
                            Email = "to@mail.com",
                            Imagem = "to.jpg",
                            Nome = "Tó"
                        },
                        new
                        {
                            ID = 3,
                            Email = "ruca@mail.com",
                            Imagem = "ruca.jpg",
                            Nome = "Ruca"
                        },
                        new
                        {
                            ID = 4,
                            Email = "joao@mail.com",
                            Imagem = "joao.jpg",
                            Nome = "João"
                        },
                        new
                        {
                            ID = 5,
                            Email = "rick@mail.com",
                            Imagem = "rick.jpg",
                            Nome = "Rick"
                        },
                        new
                        {
                            ID = 6,
                            Email = "morty@mail.com",
                            Imagem = "morty.jpg",
                            Nome = "Morty"
                        });
                });

            modelBuilder.Entity("FoodForm.Models.Comentarios", b =>
                {
                    b.HasOne("FoodForm.Models.Receitas", "Receita")
                        .WithMany("ListaDeComentarios")
                        .HasForeignKey("ReceitaFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodForm.Models.Utilizadores", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodForm.Models.Denuncias", b =>
                {
                    b.HasOne("FoodForm.Models.Receitas", "Receita")
                        .WithMany()
                        .HasForeignKey("ReceitaFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodForm.Models.Utilizadores", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodForm.Models.Gostos", b =>
                {
                    b.HasOne("FoodForm.Models.Receitas", "Receita")
                        .WithMany()
                        .HasForeignKey("ReceitaFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodForm.Models.Utilizadores", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodForm.Models.Receitas", b =>
                {
                    b.HasOne("FoodForm.Models.Utilizadores", "Utilizador")
                        .WithMany("MinhasReceitas")
                        .HasForeignKey("Autor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodForm.Models.Utilizadores", null)
                        .WithMany("ReceitasGostadas")
                        .HasForeignKey("UtilizadoresID");
                });
#pragma warning restore 612, 618
        }
    }
}
